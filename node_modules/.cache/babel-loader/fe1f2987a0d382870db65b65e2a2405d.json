{"ast":null,"code":"import _toConsumableArray from \"/Users/waspa/projects/kritek-react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { createLogger } from \"redux-logger\";\nimport rootReducer from \"./rootReducer\";\nimport rootSaga from \"./rootSaga\";\n\n// logger middleware\nvar logger = createLogger();\nfunction isDev() {\n  return process.env.NODE_ENV === \"development\";\n}\n// saga middleware\nvar sagaMiddleware = createSagaMiddleware();\n\n// only apply logger middleware on development mode\nvar middleware = isDev() ? [].concat(_toConsumableArray(getDefaultMiddleware({\n  thunk: false\n})), [logger]) : _toConsumableArray(getDefaultMiddleware({\n  thunk: false\n}));\n\n// mount it on the Store\nvar store = configureStore({\n  reducer: rootReducer,\n  devTools: isDev(),\n  middleware: middleware\n});\nsagaMiddleware.run(rootSaga);\nexport default store;","map":{"version":3,"names":["configureStore","getDefaultMiddleware","createSagaMiddleware","createLogger","rootReducer","rootSaga","logger","isDev","process","env","NODE_ENV","sagaMiddleware","middleware","concat","_toConsumableArray","thunk","store","reducer","devTools","run"],"sources":["/Users/waspa/projects/kritek-react-app/src/store/store.ts"],"sourcesContent":["import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { createLogger } from \"redux-logger\";\nimport rootReducer from \"./rootReducer\";\nimport rootSaga from \"./rootSaga\";\n\n// logger middleware\nconst logger = createLogger();\n\nfunction isDev() {\n\treturn process.env.NODE_ENV === \"development\";\n}\n// saga middleware\nconst sagaMiddleware = createSagaMiddleware();\n\n// only apply logger middleware on development mode\nconst middleware = isDev()\n\t? [...getDefaultMiddleware({ thunk: false }), logger]\n\t: [...getDefaultMiddleware({ thunk: false })];\n\n// mount it on the Store\nconst store = configureStore({\n\treducer: rootReducer,\n\tdevTools: isDev(),\n\tmiddleware,\n});\n\nsagaMiddleware.run(rootSaga);\nexport default store;\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n"],"mappings":";AAAA,SAASA,cAAc,EAAEC,oBAAoB,QAAQ,kBAAkB;AACvE,OAAOC,oBAAoB,MAAM,YAAY;AAC7C,SAASC,YAAY,QAAQ,cAAc;AAC3C,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,QAAQ,MAAM,YAAY;;AAEjC;AACA,IAAMC,MAAM,GAAGH,YAAY,CAAC,CAAC;AAE7B,SAASI,KAAKA,CAAA,EAAG;EAChB,OAAOC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa;AAC9C;AACA;AACA,IAAMC,cAAc,GAAGT,oBAAoB,CAAC,CAAC;;AAE7C;AACA,IAAMU,UAAU,GAAGL,KAAK,CAAC,CAAC,MAAAM,MAAA,CAAAC,kBAAA,CACnBb,oBAAoB,CAAC;EAAEc,KAAK,EAAE;AAAM,CAAC,CAAC,IAAET,MAAM,KAAAQ,kBAAA,CAC9Cb,oBAAoB,CAAC;EAAEc,KAAK,EAAE;AAAM,CAAC,CAAC,CAAC;;AAE9C;AACA,IAAMC,KAAK,GAAGhB,cAAc,CAAC;EAC5BiB,OAAO,EAAEb,WAAW;EACpBc,QAAQ,EAAEX,KAAK,CAAC,CAAC;EACjBK,UAAU,EAAVA;AACD,CAAC,CAAC;AAEFD,cAAc,CAACQ,GAAG,CAACd,QAAQ,CAAC;AAC5B,eAAeW,KAAK"},"metadata":{},"sourceType":"module"}